import base.BaseTest;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;
import pages.CodePenCreatePenPage;

import static constants.messages.ErrorMessages.*;

public class CreatePenTests extends BaseTest {

    @Test
    public void testInvalidHtml(){
        SoftAssert softAssert = new SoftAssert();
        CodePenCreatePenPage createPenPage = homePage.clickStartCodingButton();
        createPenPage.addHTMLCode("<h1>test invalid html");
        createPenPage.clickHtmlSettingDropdown();
        createPenPage.clickAnalyzeHtml();
        softAssert.assertTrue(createPenPage.getHtmlErrorMessage().equals(htmlMissingTagErrorMessage));
        softAssert.assertAll();
    }

    @Test
    public void testInvalidCss(){
        SoftAssert softAssert = new SoftAssert();
        CodePenCreatePenPage createPenPage = homePage.clickStartCodingButton();
        createPenPage.addCSSCode("test invalid css");
        createPenPage.clickCssSettingDropdown();
        createPenPage.clickAnalyzeCss();
        softAssert.assertTrue(createPenPage.getCssErrorMessage().equals(cssUnknownWordErrorMessage));
        softAssert.assertAll();
    }

    @Test
    public void testEmptyBlockCss(){
        SoftAssert softAssert = new SoftAssert();
        CodePenCreatePenPage createPenPage = homePage.clickStartCodingButton();
        createPenPage.addCSSCode("body{\n" +
                "  \n" +
                "}");
        createPenPage.clickCssSettingDropdown();
        createPenPage.clickAnalyzeCss();
        softAssert.assertTrue(createPenPage.getCssErrorMessage().equals(cssEmptyBlockErrorMessage));
        softAssert.assertAll();
    }

    @Test
    public void testValidCss(){
        SoftAssert softAssert = new SoftAssert();
        CodePenCreatePenPage createPenPage = homePage.clickStartCodingButton();
        createPenPage.addCSSCode("body {\n" +
                "        background-color: blue;\n" +
                "    }");
        createPenPage.clickCssSettingDropdown();
        createPenPage.clickAnalyzeCss();
        softAssert.assertFalse(createPenPage.isCssErrorDisplayed());
        softAssert.assertAll();
    }

    @Test
    public void testValidJs(){
        SoftAssert softAssert = new SoftAssert();
        CodePenCreatePenPage createPenPage = homePage.clickStartCodingButton();
        createPenPage.addJSCode("function toDo() {\n" +
                "  console.log(\"New message!\");\n" +
                "}");
        createPenPage.clickJsSettingDropdown();
        createPenPage.clickAnalyzeJs();
        softAssert.assertFalse(createPenPage.isJsErrorDisplayed());
        softAssert.assertAll();
    }

    @Test
    public void testInvalidJs(){
        SoftAssert softAssert = new SoftAssert();
        CodePenCreatePenPage createPenPage = homePage.clickStartCodingButton();
        createPenPage.addJSCode("invalid js");
        createPenPage.clickJsSettingDropdown();
        createPenPage.clickAnalyzeJs();
        softAssert.assertTrue(createPenPage.getJsErrorMessage().equals(invalidJsErrorMessage));
        softAssert.assertAll();
    }

    @Test
    public void testTitleUntitledInTheBeginning(){
        SoftAssert softAssert = new SoftAssert();
        CodePenCreatePenPage createPenPage = homePage.clickStartCodingButton();
        softAssert.assertEquals(createPenPage.getTitle(), "Untitled");
        softAssert.assertAll();
    }

    @Test
    public void testTitleDescriptionTagEmpty(){
        SoftAssert softAssert = new SoftAssert();
        CodePenCreatePenPage createPenPage = homePage.clickStartCodingButton();
        createPenPage.clickPenSettings();
        softAssert.assertTrue(createPenPage.getPenTitleFieldValue().isEmpty());
        softAssert.assertTrue(createPenPage.getPenDescriptionFieldValue().isEmpty());
        softAssert.assertTrue(createPenPage.getPenTagsFieldValue().isEmpty());
        softAssert.assertAll();
    }

    @Test
    public void testTitleChange(){
        SoftAssert softAssert = new SoftAssert();
        CodePenCreatePenPage createPenPage = homePage.clickStartCodingButton();
        softAssert.assertEquals(createPenPage.getTitle(), "Untitled");
        createPenPage.clickPenSettings();
        createPenPage.fillPenTitleField("Test Title");
        createPenPage.clickClosePenSettings();
        softAssert.assertEquals(createPenPage.getTitle(), "Test Title");
        softAssert.assertAll();
    }

    @Test
    public void testDescriptionChange(){
        SoftAssert softAssert = new SoftAssert();
        CodePenCreatePenPage createPenPage = homePage.clickStartCodingButton();
        createPenPage.clickPenSettings();
        createPenPage.fillPenDescriptionField("Here is a test description");
        createPenPage.clickClosePenSettings();
        createPenPage.clickPenSettings();
        softAssert.assertTrue(createPenPage.getPenDescriptionFieldValue().contains("Here is a test description"));
        softAssert.assertAll();
    }

    @Test
    public void testTagChange(){
        SoftAssert softAssert = new SoftAssert();
        CodePenCreatePenPage createPenPage = homePage.clickStartCodingButton();
        createPenPage.clickPenSettings();
        createPenPage.fillPenTagsField("testing, selenium, java");
        createPenPage.clickClosePenSettings();
        createPenPage.clickPenSettings();
        softAssert.assertTrue(createPenPage.getPenTagsFieldValue().contains("testing, selenium, java"));
        softAssert.assertAll();
    }
}
